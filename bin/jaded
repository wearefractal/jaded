#!/usr/bin/env coffee

jaded = require '../index'
program = require 'commander'
{readFileSync, writeFileSync, readdirSync, lstatSync} = require 'fs'
{join, basename, extname, existsSync} = require 'path'
mkdirp = require 'mkdirp'

program
  .version('0.0.1')
  .option('-i --input [folder]', 'Specify input folder', '.')
  .option('-o --output [folder]', 'Specify output folder', '.')
  .option('-d --development', 'Beautify output and insert line numbers')
  .option('-a --amd', 'Wrap output in AMD closure')
  .option('-r --rivets', 'Wrap output in Rivets bindings')
  .parse(process.argv)

indir = join process.cwd(), program.input
outdir = join process.cwd(), program.output
mkdirp.sync outdir unless existsSync outdir

throw 'Invalid input folder' unless lstatSync(indir).isDirectory()
throw 'Invalid output folder' unless lstatSync(outdir).isDirectory()

opt =
  development: program.development
  amd: program.amd
  rivets: program.rivets

count = 0
renderFolder = (folder, output) ->
  files = readdirSync folder
  for file in files
    file = join folder, file
    stat = lstatSync file
    
    if stat.isDirectory()
      outdir = join output, basename file
      mkdirp.sync outdir unless existsSync outdir
      renderFolder file, outdir
    else if extname(file) is '.jade'
      opt.filename = file
      name = basename file, extname file
      savepath = join output, "#{name}.js"
      contents = String readFileSync file
      newcontents = jaded.compile contents, opt
      writeFileSync savepath, newcontents
      ++count

renderFolder indir, outdir
console.log "#{count} template#{if count is 1 then '' else 's'} from '#{program.input}' rendered to '#{program.output}'"
